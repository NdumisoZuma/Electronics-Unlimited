using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Helpers;
using System.Web.Mvc;
using Electronica.Models;

namespace Electronica.Controllers
{
    public class ProductImagesController : Controller
    {
        ApplicationDbContext db = new ApplicationDbContext();
        // GET: ProductImages
        public ActionResult Index()
        {
            return View(db.productImages.ToList());
        }

       // GET: ProductImages/Create
        public ActionResult Upload()
        {
            return View();
        }

        //POST: ProductImages/Create

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Upload(HttpPostedFileBase[] files)
        {
            //variables to track filesOL,LLLLLJGKJGJKGCHH
            bool allValid = true;
            string invalidFiles = "";

            //view sql generated by EF
            db.Database.Log = sql => Trace.WriteLine(sql);

            //check if the user has entered a file
            if (files[0] != null)
            {
                //check if file is valid
                if (files.Length <= 10)
                {
                    // check if all files are valid

                    
                    foreach (var file in files)
                    {
                        if (!validateFile(file))
                        {
                            allValid = false;
                            invalidFiles +=", " + file.FileName;
                        }
                       
                    }
                    // if they are all valid try to save to disk
                    if (allValid)
                    {
                        foreach(var file in files)
                        {
                            try
                            {
                                SaveFileToDisk(file);
                            }
                            catch (Exception)
                            {

                                ModelState.AddModelError("FileName"," Could not save this image please try again");
                            }
                        }

                        
                    }

                    //else add an error listing out the invalid files
                    else
                    {
                        ModelState.AddModelError("FileName", "All files must be gif, png, jpeg or jpg and less than 2MB in size. The following files" + invalidFiles + " are not valid");
                    }




                }
                // the user has added more than 10 files
                else
                {
                    ModelState.AddModelError("FileName", "The user has added more than 10 files ");
                }




                //if they are all valid then save them to disk


            }
            else
            {
                ModelState.AddModelError("FileName", "Please enter a file before clicking submit");
            }

            if (ModelState.IsValid)
            {
                bool duplicate = false;
                bool otherDbError = false;
                string duplicateFiles = "";

                foreach (var file in files)
                {
                    //try and save each file
                    var productToAdd = new ProductImage { FileName = file.FileName };

                    try
                    {
                        db.productImages.Add(productToAdd);
                        db.SaveChanges();
                    }
                    catch (DbUpdateException ex)
                    {
                        SqlException innerException = ex.InnerException.InnerException as SqlException;
                        if (innerException != null && innerException.Number == 2601)
                        {
                            duplicateFiles += ", " + file.FileName;
                            duplicate = true;

                            //remove an entry from DbContext
                            db.Entry(productToAdd).State = EntityState.Detached;
                        }

                        else
                        {
                            otherDbError = true;
                        }
                        
                    }
                    
                }

                //add a list of duplicate files in the error message
                if (duplicate)
                {
                    ModelState.AddModelError("FileName", "All files uploaded except the files" + duplicateFiles + ", which already exist in the system." + " Please delete them and try again if you wish to re-add them");
                    return View();
                }

                else if (otherDbError)
                {
                    ModelState.AddModelError("FileName", "Sorry an error occured while saving to the database, please try again");
                    return View();
                }

                return RedirectToAction("Index");

            }

            return View();
        }

        // GET: ProductImages/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            ProductImage productImage = db.productImages.Find(id);
            if (productImage == null)
            {
                return HttpNotFound();
            }
            return View(productImage);
        }


        //POST: Productimages/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]

        public ActionResult DeleteConfirmed(int id)
        {
            ProductImage productImage = db.productImages.Find(id);

            //find all the mappings for this image
            var mappings = productImage.ProductImageMappings.Where(pim => pim.ProductImageID == id);
            foreach (var mapping in mappings)
            {
                //find all mappings for any product containing this image
                var mappingsToUpdate = db.productImageMappings.Where(pim => pim.ProductID == mapping.ProductID);
                //foreach image in each product change its imagenumber to one lower if it is higher than current image
                foreach (var mappingToUpdate in mappingsToUpdate)
                {
                    if (mapping.ImageNumber > mapping.ImageNumber)
                    {
                        mappingToUpdate.ImageNumber--;
                    }
                }
            }

            //delete file from filesystem and the DB
            System.IO.File.Delete(Request.MapPath(constant.ProductImagePath + productImage.FileName));
            System.IO.File.Delete(Request.MapPath(constant.ProductThumbnailPath + productImage.FileName));

            db.productImages.Remove(productImage);
            db.SaveChanges();
            return RedirectToAction("Index");
        }


        //validate the file
        private bool validateFile(HttpPostedFileBase file)
        {
            // get the file name and store it in fileExtention variable 
            string fileExtension = Path.GetExtension(file.FileName).ToLower();
            // put all the allowed file type extionsion in an array
            string[] allowedFileTypes = { ".gif", ".png", ".jpeg", ".jpg" };

            if ((file.ContentLength > 0 && file.ContentLength < 2097152) || allowedFileTypes.Contains(fileExtension))
            {
                return true;
            }
            return false;

        }

        //Resize and save to disk
        private void SaveFileToDisk(HttpPostedFileBase file)
        {
            //resize image and save to directory
            WebImage img = new WebImage(file.InputStream);
            if (img.Width > 190)
            {
                img.Resize(190, img.Height);
            }
            img.Save(constant.ProductImagePath + file.FileName);

            if (img.Width>100)
            {
                img.Resize(100, img.Height);
            }
            img.Save(constant.ProductThumbnailPath + file.FileName);
        }
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }







    }
}